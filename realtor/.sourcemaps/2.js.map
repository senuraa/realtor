{"version":3,"sources":["../../src/pages/signup/signup.module.ts","../../src/pages/signup/signup.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAyC;AACO;AACV;AACtC,4DAA4D;AAW5D;IAAA;IAA+B,CAAC;IAAnB,gBAAgB;QAT5B,uEAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,2DAAU;aACX;YACD,OAAO,EAAE;gBACP,sEAAe,CAAC,QAAQ,CAAC,2DAAU,CAAC;aAErC;SACF,CAAC;OACW,gBAAgB,CAAG;IAAD,uBAAC;CAAA;AAAH;;;;;;;;;;;;;;;;;;;;;;;ACda;AACwB;AACT;AAC6B;AACtF,gDAAgD;AAChD;;;;;GAKG;AAOH;IAEE,WAAW;IACX,oBAAoB;IACpB,mBAAmB;IACnB,sBAAsB;IACtB,wBAAwB;IACxB,eAAe;IACf,iBAAiB;IACjB,IAAI;IACJ,oBAAmB,OAAsB,EAAS,SAAoB,EAAS,aAAoC,EAAU,WAAuB;QAAjI,YAAO,GAAP,OAAO,CAAe;QAAS,cAAS,GAAT,SAAS,CAAW;QAAS,kBAAa,GAAb,aAAa,CAAuB;QAAU,gBAAW,GAAX,WAAW,CAAY;QAClJ,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YACrC,UAAU,EAAE,CAAC,EAAE,EAAC,kEAAU,CAAC,QAAQ,CAAC;YACpC,SAAS,EAAE,CAAC,EAAE,EAAC,kEAAU,CAAC,QAAQ,CAAC;YACnC,YAAY,EAAE,CAAC,EAAE,EAAC,kEAAU,CAAC,OAAO,CAAC,CAAC,kEAAU,CAAC,QAAQ,EAAC,kEAAU,CAAC,SAAS,CAAC,EAAE,CAAC,EAAC,kEAAU,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC9G,YAAY,EAAE,IAAI;YAClB,KAAK,EAAE,EAAE;YACT,QAAQ,EAAE,CAAC,EAAE,EAAC,kEAAU,CAAC,OAAO,CAAC,CAAC,kEAAU,CAAC,QAAQ,EAAC,kEAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SAEnF,CAAC;IACJ,CAAC;IACD,2BAAM,GAAN,UAAO,IAAI;QAAX,iBAWC;QAVC,0CAA0C;QAC1C,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAC,QAAQ;YAChD,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;YACvB,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;YAC/D,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;YAEtC,wBAAwB;QAC1B,CAAC,EAAE,UAAC,GAAG;YACL,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;QAClB,CAAC,CAAC;IACJ,CAAC;IACD,mCAAc,GAAd;QACE,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;IAC3C,CAAC;IAnCU,UAAU;QAJtB,wEAAS,CAAC;YACT,QAAQ,EAAE,aAAa;WACG;SAC3B,CAAC;mBAWoJ;OAVzI,UAAU,CAkDtB;IAAD,CAAC;AAAA;SAlDY,UAAU,e","file":"2.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { SignupPage } from './signup';\n// import { CountryPickerModule } from 'ngx-country-picker';\n\n@NgModule({\n  declarations: [\n    SignupPage,\n  ],\n  imports: [\n    IonicPageModule.forChild(SignupPage),\n    // CountryPickerModule.forRoot()\n  ],\n})\nexport class SignupPageModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/signup/signup.module.ts","import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup,Validators } from '@angular/forms'\nimport { IonicPage, NavController, NavParams } from 'ionic-angular';\nimport { SignupServiceProvider } from '../../providers/signup-service/signup-service';\n//import { VerifyPage } from '../verify/verify';\n/**\n * Generated class for the SignupPage page.\n *\n * See https://ionicframework.com/docs/components/#navigation for more info on\n * Ionic pages and navigation.\n */\n\n@IonicPage()\n@Component({\n  selector: 'page-signup',\n  templateUrl: 'signup.html',\n})\nexport class SignupPage {\n  signUpForm: FormGroup;\n  // user = {\n  //   first_name: '',\n  //   last_name: '',\n  //   phone_number: '',\n  //   country_code: '94',\n  //   token: '',\n  //   password: ''\n  // }\n  constructor(public navCtrl: NavController, public navParams: NavParams, public signupService: SignupServiceProvider, private formBuilder:FormBuilder) {\n    this.signUpForm = this.formBuilder.group({\n        first_name: ['',Validators.required],\n        last_name: ['',Validators.required],\n        phone_number: ['',Validators.compose([Validators.required,Validators.minLength(10),Validators.maxLength(10)])],\n        country_code: '94',\n        token: '',\n        password: ['',Validators.compose([Validators.required,Validators.minLength(6)])]\n      \n    })\n  }\n  signup(user) {\n    //this.navCtrl.push(VerifyPage,this.user);\n    this.signupService.userSignup(user).then((response) => {\n      console.log('success');\n      window.localStorage.setItem('phone_number', user.phone_number);\n      this.navCtrl.push('VerifyPage', user);\n\n      //console.log(response);\n    }, (err) => {\n      console.log(err)\n    })\n  }\n  ionViewDidLoad() {\n    console.log('ionViewDidLoad SignupPage');\n  }\n  // static passwordsMatch(cg: FormGroup): {[err: string]: any} {\n  //   let pwd1 = cg.get('password');\n  //   let pwd2 = cg.get('password_conf');\n  //   let rv: {[error: string]: any} = {};\n  //   if ((pwd1.touched || pwd2.touched) && pwd1.value !== pwd2.value) {\n  //     rv['passwordMismatch'] = true;\n  //   }else{\n  //     rv['passwordMismatch'] =false;\n  //   }\n  //   console.log(rv)\n  //   return rv;\n\n  // }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/signup/signup.ts"],"sourceRoot":""}